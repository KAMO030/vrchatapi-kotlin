/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.apis

import io.github.kamo030.vrchatapi.models.Error
import io.github.kamo030.vrchatapi.models.Jam
import io.github.kamo030.vrchatapi.models.Submission

import io.github.kamo030.vrchatapi.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class JamsApi(
    private val apiClient: ApiClient,
) {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT,
        httpClientConfig: (HttpClientConfig<*>.() -> Unit)? = null,
    ) : this(
        ApiClient(
            baseUrl = baseUrl,
            httpClientEngine = httpClientEngine,
            httpClientConfig = httpClientConfig,
            jsonBlock = jsonSerializer
        )
    )

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClient: HttpClient,
    ) : this(
        ApiClient(
            baseUrl = baseUrl,
            httpClient = httpClient,
        )
    )

    /**
     * Show jam information
     * Returns a jam.
     * @param jamId Must be a valid query ID.
     * @return Jam
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getJam(jamId: kotlin.String): HttpResponse<Jam> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/jams/{jamId}".replace("{" + "jamId" + "}", "$jamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Show jam submissions
     * Returns all submissions of a jam.
     * @param jamId Must be a valid query ID.
     * @return kotlin.collections.List<Submission>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getJamSubmissions(jamId: kotlin.String): HttpResponse<kotlin.collections.List<Submission>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/jams/{jamId}/submissions".replace("{" + "jamId" + "}", "$jamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetJamSubmissionsResponse>().map { value }
    }

    @Serializable(GetJamSubmissionsResponse.Companion::class)
    private class GetJamSubmissionsResponse(val value: List<Submission>) {
        companion object : KSerializer<GetJamSubmissionsResponse> {
            private val serializer: KSerializer<List<Submission>> = serializer<List<Submission>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetJamSubmissionsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetJamSubmissionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Show jams list
     * Lists World Jams or Avatar Jams, both currently running and ones that have ended.  &#x60;isActive&#x60; is used to select only active or already ended jams.  &#x60;type&#x60; is used to select only world or avatar jams, and can only take &#x60;world&#x60; or &#x60;avatar&#x60;. &#x60;&#x60;
     * @param type Only show jams of this type (&#x60;avatar&#x60; or &#x60;world&#x60;). (optional)
     * @return kotlin.collections.List<Jam>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getJams(type: kotlin.String? = null): HttpResponse<kotlin.collections.List<Jam>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/jams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetJamsResponse>().map { value }
    }

    @Serializable(GetJamsResponse.Companion::class)
    private class GetJamsResponse(val value: List<Jam>) {
        companion object : KSerializer<GetJamsResponse> {
            private val serializer: KSerializer<List<Jam>> = serializer<List<Jam>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetJamsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetJamsResponse(serializer.deserialize(decoder))
        }
    }

}
