/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.apis

import io.github.kamo030.vrchatapi.models.CurrentUser
import io.github.kamo030.vrchatapi.models.Error
import io.github.kamo030.vrchatapi.models.Success
import io.github.kamo030.vrchatapi.models.TwoFactorAuthCode
import io.github.kamo030.vrchatapi.models.TwoFactorEmailCode
import io.github.kamo030.vrchatapi.models.UserExists
import io.github.kamo030.vrchatapi.models.Verify2FAEmailCodeResult
import io.github.kamo030.vrchatapi.models.Verify2FAResult
import io.github.kamo030.vrchatapi.models.VerifyAuthTokenResult

import io.github.kamo030.vrchatapi.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.request.*
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

fun ApiClient.createAuthenticationApi() = AuthenticationApi(this)

open class AuthenticationApi(
    private val apiClient: ApiClient,
) {

    /**
     * Check User Exists
     * Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
     * @param email Filter by email. (optional)
     * @param displayName Filter by displayName. (optional)
     * @param username Filter by Username. (optional)
     * @param excludeUserId Exclude by UserID. (optional)
     * @return UserExists
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun checkUserExists(
        email: kotlin.String? = null,
        displayName: kotlin.String? = null,
        username: kotlin.String? = null,
        excludeUserId: kotlin.String? = null,
    ): HttpResponse<UserExists> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        email?.apply { localVariableQuery["email"] = listOf("$email") }
        displayName?.apply { localVariableQuery["displayName"] = listOf("$displayName") }
        username?.apply { localVariableQuery["username"] = listOf("$username") }
        excludeUserId?.apply { localVariableQuery["excludeUserId"] = listOf("$excludeUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/auth/exists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete User
     * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
     * @param userId Must be a valid user ID.
     * @return CurrentUser
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteUser(userId: kotlin.String): HttpResponse<CurrentUser> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/{userId}/delete".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Login and/or Get Current User Info
     * This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  The auth string after &#x60;Authorization: Basic {string}&#x60; is a base64-encoded string of the username and password, both individually url-encoded, and then joined with a colon.    &gt; base64(urlencode(username):urlencode(password))  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
     * @return CurrentUser
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCurrentUser(username: kotlin.String? = null, password: kotlin.String? = null): HttpResponse<CurrentUser> {

        username?.let { apiClient.setUsername(it) }
        password?.let { apiClient.setPassword(it) }

        val localVariableAuthNames = listOf<String>("authHeader", "twoFactorAuthCookie", "authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/auth/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Logout
     * Invalidates the login session.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun logout(): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Verify 2FA code
     * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
     * @param twoFactorAuthCode
     * @return Verify2FAResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun verify2FA(twoFactorAuthCode: TwoFactorAuthCode): HttpResponse<Verify2FAResult> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = twoFactorAuthCode

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/twofactorauth/totp/verify",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Verify 2FA email code
     * Finishes the login sequence with an 2FA email code.
     * @param twoFactorEmailCode
     * @return Verify2FAEmailCodeResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun verify2FAEmailCode(twoFactorEmailCode: TwoFactorEmailCode): HttpResponse<Verify2FAEmailCodeResult> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = twoFactorEmailCode

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/twofactorauth/emailotp/verify",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Verify Auth Token
     * Verify whether the currently provided Auth Token is valid.
     * @return VerifyAuthTokenResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun verifyAuthToken(): HttpResponse<VerifyAuthTokenResult> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/auth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Verify 2FA code with Recovery code
     * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
     * @param twoFactorAuthCode
     * @return Verify2FAResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun verifyRecoveryCode(twoFactorAuthCode: TwoFactorAuthCode): HttpResponse<Verify2FAResult> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = twoFactorAuthCode

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/twofactorauth/otp/verify",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return apiClient.jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
