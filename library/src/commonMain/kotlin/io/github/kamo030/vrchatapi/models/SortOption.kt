/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.models


import kotlinx.serialization.*

/**
 * 
 *
 * Values: Popularity,Heat,Trust,Shuffle,Random,Favorites,ReportScore,ReportCount,PublicationDate,LabsPublicationDate,Created,CreatedAt,Updated,UpdatedAt,Order,Relevance,Magic,Name
 */
@Serializable
enum class SortOption(val value: kotlin.String) {

    @SerialName(value = "popularity")
    Popularity("popularity"),

    @SerialName(value = "heat")
    Heat("heat"),

    @SerialName(value = "trust")
    Trust("trust"),

    @SerialName(value = "shuffle")
    Shuffle("shuffle"),

    @SerialName(value = "random")
    Random("random"),

    @SerialName(value = "favorites")
    Favorites("favorites"),

    @SerialName(value = "reportScore")
    ReportScore("reportScore"),

    @SerialName(value = "reportCount")
    ReportCount("reportCount"),

    @SerialName(value = "publicationDate")
    PublicationDate("publicationDate"),

    @SerialName(value = "labsPublicationDate")
    LabsPublicationDate("labsPublicationDate"),

    @SerialName(value = "created")
    Created("created"),

    @SerialName(value = "_created_at")
    CreatedAt("_created_at"),

    @SerialName(value = "updated")
    Updated("updated"),

    @SerialName(value = "_updated_at")
    UpdatedAt("_updated_at"),

    @SerialName(value = "order")
    Order("order"),

    @SerialName(value = "relevance")
    Relevance("relevance"),

    @SerialName(value = "magic")
    Magic("magic"),

    @SerialName(value = "name")
    Name("name");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SortOption) "$data" else null

        /**
         * Returns a valid [SortOption] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SortOption? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

