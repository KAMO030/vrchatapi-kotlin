/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.models

import io.github.kamo030.vrchatapi.models.AccountDeletionLog
import io.github.kamo030.vrchatapi.models.AgeVerificationStatus
import io.github.kamo030.vrchatapi.models.Badge
import io.github.kamo030.vrchatapi.models.CurrentUserPresence
import io.github.kamo030.vrchatapi.models.DeveloperType
import io.github.kamo030.vrchatapi.models.PastDisplayName
import io.github.kamo030.vrchatapi.models.UserState
import io.github.kamo030.vrchatapi.models.UserStatus

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param acceptedTOSVersion 
 * @param ageVerificationStatus 
 * @param ageVerified 
 * @param allowAvatarCopying 
 * @param bio 
 * @param bioLinks  
 * @param currentAvatar 
 * @param currentAvatarAssetUrl 
 * @param currentAvatarImageUrl When profilePicOverride is not empty, use it instead.
 * @param currentAvatarThumbnailImageUrl When profilePicOverride is not empty, use it instead.
 * @param currentAvatarTags 
 * @param dateJoined 
 * @param developerType 
 * @param displayName 
 * @param emailVerified 
 * @param friendGroupNames Always empty array.
 * @param friendKey 
 * @param friends 
 * @param hasBirthday 
 * @param hasEmail 
 * @param hasLoggedInFromClient 
 * @param hasPendingEmail 
 * @param homeLocation WorldID be \"offline\" on User profiles if you are not friends with that user.
 * @param id A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
 * @param isAdult 
 * @param isFriend 
 * @param lastLogin 
 * @param lastMobile 
 * @param lastPlatform This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
 * @param obfuscatedEmail 
 * @param obfuscatedPendingEmail 
 * @param oculusId 
 * @param pastDisplayNames  
 * @param profilePicOverride 
 * @param profilePicOverrideThumbnail 
 * @param pronouns 
 * @param state 
 * @param status 
 * @param statusDescription 
 * @param statusFirstTime 
 * @param statusHistory 
 * @param steamDetails 
 * @param steamId 
 * @param tags 
 * @param twoFactorAuthEnabled 
 * @param unsubscribe 
 * @param userIcon 
 * @param acceptedPrivacyVersion 
 * @param accountDeletionDate 
 * @param accountDeletionLog  
 * @param activeFriends  
 * @param badges  
 * @param fallbackAvatar 
 * @param hideContentFilterSettings 
 * @param userLanguage 
 * @param userLanguageCode 
 * @param isBoopingEnabled 
 * @param lastActivity 
 * @param googleId 
 * @param googleDetails 
 * @param picoId 
 * @param viveId 
 * @param offlineFriends 
 * @param onlineFriends 
 * @param presence 
 * @param queuedInstance 
 * @param receiveMobileInvitations 
 * @param twoFactorAuthEnabledDate 
 * @param updatedAt 
 * @param username -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
 */
@Serializable
data class CurrentUser (

    @SerialName(value = "acceptedTOSVersion") @Required val acceptedTOSVersion: kotlin.Int,

    @SerialName(value = "ageVerificationStatus") @Required val ageVerificationStatus: AgeVerificationStatus,

    /* `true` if, user is age verified 18 or above. but `false`, when status is not shared. Otherwise always `false`. */
    @SerialName(value = "ageVerified") @Required val ageVerified: kotlin.Boolean,

    @SerialName(value = "allowAvatarCopying") @Required val allowAvatarCopying: kotlin.Boolean,

    @SerialName(value = "bio") @Required val bio: kotlin.String,

    /*   */
    @SerialName(value = "bioLinks") @Required val bioLinks: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "currentAvatar") @Required val currentAvatar: kotlin.String,

    @SerialName(value = "currentAvatarAssetUrl") @Required val currentAvatarAssetUrl: kotlin.String,

    /* When profilePicOverride is not empty, use it instead. */
    @SerialName(value = "currentAvatarImageUrl") @Required val currentAvatarImageUrl: kotlin.String,

    /* When profilePicOverride is not empty, use it instead. */
    @SerialName(value = "currentAvatarThumbnailImageUrl") @Required val currentAvatarThumbnailImageUrl: kotlin.String,

    @SerialName(value = "currentAvatarTags") @Required val currentAvatarTags: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "date_joined") @Required val dateJoined: kotlinx.datetime.LocalDate,

    @SerialName(value = "developerType") @Required val developerType: DeveloperType = DeveloperType.None,

    @SerialName(value = "displayName") @Required val displayName: kotlin.String,

    @SerialName(value = "emailVerified") @Required val emailVerified: kotlin.Boolean,

    /* Always empty array. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "friendGroupNames") @Required val friendGroupNames: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "friendKey") @Required val friendKey: kotlin.String,

    @SerialName(value = "friends") @Required val friends: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "hasBirthday") @Required val hasBirthday: kotlin.Boolean,

    @SerialName(value = "hasEmail") @Required val hasEmail: kotlin.Boolean,

    @SerialName(value = "hasLoggedInFromClient") @Required val hasLoggedInFromClient: kotlin.Boolean,

    @SerialName(value = "hasPendingEmail") @Required val hasPendingEmail: kotlin.Boolean,

    /* WorldID be \"offline\" on User profiles if you are not friends with that user. */
    @SerialName(value = "homeLocation") @Required val homeLocation: kotlin.String,

    /* A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    @SerialName(value = "isAdult") @Required val isAdult: kotlin.Boolean,

    @SerialName(value = "isFriend") @Required val isFriend: kotlin.Boolean = false,

    @SerialName(value = "last_login") @Required val lastLogin: kotlinx.datetime.Instant,

    @SerialName(value = "last_mobile") @Required val lastMobile: kotlinx.datetime.Instant?,

    /* This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`. */
    @SerialName(value = "last_platform") @Required val lastPlatform: kotlin.String,

    @SerialName(value = "obfuscatedEmail") @Required val obfuscatedEmail: kotlin.String,

    @SerialName(value = "obfuscatedPendingEmail") @Required val obfuscatedPendingEmail: kotlin.String,

    @SerialName(value = "oculusId") @Required val oculusId: kotlin.String,

    /*   */
    @SerialName(value = "pastDisplayNames") @Required val pastDisplayNames: kotlin.collections.List<PastDisplayName>,

    @SerialName(value = "profilePicOverride") @Required val profilePicOverride: kotlin.String,

    @SerialName(value = "profilePicOverrideThumbnail") @Required val profilePicOverrideThumbnail: kotlin.String,

    @SerialName(value = "pronouns") @Required val pronouns: kotlin.String,

    @SerialName(value = "state") @Required val state: UserState = UserState.Offline,

    @SerialName(value = "status") @Required val status: UserStatus = UserStatus.Offline,

    @SerialName(value = "statusDescription") @Required val statusDescription: kotlin.String,

    @SerialName(value = "statusFirstTime") @Required val statusFirstTime: kotlin.Boolean,

    @SerialName(value = "statusHistory") @Required val statusHistory: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "steamDetails") @Required val steamDetails: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    @SerialName(value = "steamId") @Required val steamId: kotlin.String,

    @SerialName(value = "tags") @Required val tags: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "twoFactorAuthEnabled") @Required val twoFactorAuthEnabled: kotlin.Boolean,

    @SerialName(value = "unsubscribe") @Required val unsubscribe: kotlin.Boolean,

    @SerialName(value = "userIcon") @Required val userIcon: kotlin.String,

    @SerialName(value = "acceptedPrivacyVersion") val acceptedPrivacyVersion: kotlin.Int? = null,

    @SerialName(value = "accountDeletionDate") val accountDeletionDate: kotlinx.datetime.LocalDate? = null,

    /*   */
    @SerialName(value = "accountDeletionLog") val accountDeletionLog: kotlin.collections.List<AccountDeletionLog>? = null,

    /*   */
    @SerialName(value = "activeFriends") val activeFriends: kotlin.collections.List<kotlin.String>? = null,

    /*   */
    @SerialName(value = "badges") val badges: kotlin.collections.List<Badge>? = null,

    @SerialName(value = "fallbackAvatar") val fallbackAvatar: kotlin.String? = null,

    @SerialName(value = "hideContentFilterSettings") val hideContentFilterSettings: kotlin.Boolean? = null,

    @SerialName(value = "userLanguage") val userLanguage: kotlin.String? = null,

    @SerialName(value = "userLanguageCode") val userLanguageCode: kotlin.String? = null,

    @SerialName(value = "isBoopingEnabled") val isBoopingEnabled: kotlin.Boolean? = true,

    @SerialName(value = "last_activity") val lastActivity: kotlinx.datetime.Instant? = null,

    @SerialName(value = "googleId") val googleId: kotlin.String? = null,

    @SerialName(value = "googleDetails") val googleDetails: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    @SerialName(value = "picoId") val picoId: kotlin.String? = null,

    @SerialName(value = "viveId") val viveId: kotlin.String? = null,

    @SerialName(value = "offlineFriends") val offlineFriends: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "onlineFriends") val onlineFriends: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "presence") val presence: CurrentUserPresence? = null,

    @SerialName(value = "queuedInstance") val queuedInstance: kotlin.String? = null,

    @SerialName(value = "receiveMobileInvitations") val receiveMobileInvitations: kotlin.Boolean? = null,

    @SerialName(value = "twoFactorAuthEnabledDate") val twoFactorAuthEnabledDate: kotlinx.datetime.Instant? = null,

    @SerialName(value = "updated_at") val updatedAt: kotlinx.datetime.Instant? = null,

    /* -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "username") val username: kotlin.String? = null

) 

