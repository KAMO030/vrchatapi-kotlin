/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.apis

import io.github.kamo030.vrchatapi.models.AddGroupGalleryImageRequest
import io.github.kamo030.vrchatapi.models.BanGroupMemberRequest
import io.github.kamo030.vrchatapi.models.CreateGroupAnnouncementRequest
import io.github.kamo030.vrchatapi.models.CreateGroupGalleryRequest
import io.github.kamo030.vrchatapi.models.CreateGroupInviteRequest
import io.github.kamo030.vrchatapi.models.CreateGroupPostRequest
import io.github.kamo030.vrchatapi.models.CreateGroupRequest
import io.github.kamo030.vrchatapi.models.CreateGroupRoleRequest
import io.github.kamo030.vrchatapi.models.Error
import io.github.kamo030.vrchatapi.models.Group
import io.github.kamo030.vrchatapi.models.GroupAnnouncement
import io.github.kamo030.vrchatapi.models.GroupGallery
import io.github.kamo030.vrchatapi.models.GroupGalleryImage
import io.github.kamo030.vrchatapi.models.GroupInstance
import io.github.kamo030.vrchatapi.models.GroupLimitedMember
import io.github.kamo030.vrchatapi.models.GroupMember
import io.github.kamo030.vrchatapi.models.GroupPermission
import io.github.kamo030.vrchatapi.models.GroupPost
import io.github.kamo030.vrchatapi.models.GroupRole
import io.github.kamo030.vrchatapi.models.GroupSearchSort
import io.github.kamo030.vrchatapi.models.LimitedGroup
import io.github.kamo030.vrchatapi.models.PaginatedGroupAuditLogEntryList
import io.github.kamo030.vrchatapi.models.RespondGroupJoinRequest
import io.github.kamo030.vrchatapi.models.Success
import io.github.kamo030.vrchatapi.models.UpdateGroupGalleryRequest
import io.github.kamo030.vrchatapi.models.UpdateGroupMemberRequest
import io.github.kamo030.vrchatapi.models.UpdateGroupRequest
import io.github.kamo030.vrchatapi.models.UpdateGroupRoleRequest

import io.github.kamo030.vrchatapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class GroupsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Add Group Gallery Image
     * Adds an image to a Group gallery.
     * @param groupId Must be a valid group ID.
     * @param groupGalleryId Must be a valid group gallery ID.
     * @param addGroupGalleryImageRequest 
     * @return GroupGalleryImage
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addGroupGalleryImage(groupId: kotlin.String, groupGalleryId: kotlin.String, addGroupGalleryImageRequest: AddGroupGalleryImageRequest): HttpResponse<GroupGalleryImage> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = addGroupGalleryImageRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/galleries/{groupGalleryId}/images".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupGalleryId" + "}", "$groupGalleryId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add Role to GroupMember
     * Adds a Role to a Group Member
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @param groupRoleId Must be a valid group role ID.
     * @return kotlin.collections.List<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addGroupMemberRole(groupId: kotlin.String, userId: kotlin.String, groupRoleId: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/members/{userId}/roles/{groupRoleId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId").replace("{" + "groupRoleId" + "}", "$groupRoleId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<AddGroupMemberRoleResponse>().map { value }
    }

    @Serializable
    private class AddGroupMemberRoleResponse(val value: List<kotlin.String>) {
        @Serializer(AddGroupMemberRoleResponse::class)
        companion object : KSerializer<AddGroupMemberRoleResponse> {
            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: AddGroupMemberRoleResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = AddGroupMemberRoleResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Create a post in a Group
     * Create a post in a Group.
     * @param groupId Must be a valid group ID.
     * @param createGroupPostRequest 
     * @return GroupPost
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addGroupPost(groupId: kotlin.String, createGroupPostRequest: CreateGroupPostRequest): HttpResponse<GroupPost> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupPostRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/posts".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Ban Group Member
     * Bans a user from a Group.
     * @param groupId Must be a valid group ID.
     * @param banGroupMemberRequest 
     * @return GroupMember
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun banGroupMember(groupId: kotlin.String, banGroupMemberRequest: BanGroupMemberRequest): HttpResponse<GroupMember> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = banGroupMemberRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/bans".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Cancel Group Join Request
     * Cancels a request sent to join the group.
     * @param groupId Must be a valid group ID.
     * @return void
     */
    open suspend fun cancelGroupRequest(groupId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/requests".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create Group
     * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
     * @param createGroupRequest 
     * @return Group
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createGroup(createGroupRequest: CreateGroupRequest): HttpResponse<Group> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create Group Announcement
     * Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
     * @param groupId Must be a valid group ID.
     * @param createGroupAnnouncementRequest 
     * @return GroupAnnouncement
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createGroupAnnouncement(groupId: kotlin.String, createGroupAnnouncementRequest: CreateGroupAnnouncementRequest): HttpResponse<GroupAnnouncement> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupAnnouncementRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/announcement".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create Group Gallery
     * Creates a gallery for a Group.
     * @param groupId Must be a valid group ID.
     * @param createGroupGalleryRequest 
     * @return GroupGallery
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createGroupGallery(groupId: kotlin.String, createGroupGalleryRequest: CreateGroupGalleryRequest): HttpResponse<GroupGallery> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupGalleryRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/galleries".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Invite User to Group
     * Sends an invite to a user to join the group.
     * @param groupId Must be a valid group ID.
     * @param createGroupInviteRequest 
     * @return void
     */
    open suspend fun createGroupInvite(groupId: kotlin.String, createGroupInviteRequest: CreateGroupInviteRequest): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupInviteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/invites".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create GroupRole
     * Create a Group role.
     * @param groupId Must be a valid group ID.
     * @param createGroupRoleRequest 
     * @return GroupRole
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createGroupRole(groupId: kotlin.String, createGroupRoleRequest: CreateGroupRoleRequest): HttpResponse<GroupRole> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupRoleRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/roles".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete Group
     * Deletes a Group.
     * @param groupId Must be a valid group ID.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroup(groupId: kotlin.String): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete Group Announcement
     * Deletes the announcement for a Group.
     * @param groupId Must be a valid group ID.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupAnnouncement(groupId: kotlin.String): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/announcement".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete Group Gallery
     * Deletes a gallery for a Group.
     * @param groupId Must be a valid group ID.
     * @param groupGalleryId Must be a valid group gallery ID.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupGallery(groupId: kotlin.String, groupGalleryId: kotlin.String): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/galleries/{groupGalleryId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupGalleryId" + "}", "$groupGalleryId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete Group Gallery Image
     * Deletes an image from a Group gallery.
     * @param groupId Must be a valid group ID.
     * @param groupGalleryId Must be a valid group gallery ID.
     * @param groupGalleryImageId Must be a valid group gallery image ID.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupGalleryImage(groupId: kotlin.String, groupGalleryId: kotlin.String, groupGalleryImageId: kotlin.String): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupGalleryId" + "}", "$groupGalleryId").replace("{" + "groupGalleryImageId" + "}", "$groupGalleryImageId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete User Invite
     * Deletes an Group invite sent to a User
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @return void
     */
    open suspend fun deleteGroupInvite(groupId: kotlin.String, userId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/invites/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete a Group post
     * Delete a Group post
     * @param groupId Must be a valid group ID.
     * @param notificationId Must be a valid notification ID.
     * @return Success
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupPost(groupId: kotlin.String, notificationId: kotlin.String): HttpResponse<Success> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/posts/{notificationId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "notificationId" + "}", "$notificationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete Group Role
     * Deletes a Group Role by ID and returns the remaining roles.
     * @param groupId Must be a valid group ID.
     * @param groupRoleId Must be a valid group role ID.
     * @return kotlin.collections.List<GroupRole>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupRole(groupId: kotlin.String, groupRoleId: kotlin.String): HttpResponse<kotlin.collections.List<GroupRole>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/roles/{groupRoleId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupRoleId" + "}", "$groupRoleId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<DeleteGroupRoleResponse>().map { value }
    }

    @Serializable
    private class DeleteGroupRoleResponse(val value: List<GroupRole>) {
        @Serializer(DeleteGroupRoleResponse::class)
        companion object : KSerializer<DeleteGroupRoleResponse> {
            private val serializer: KSerializer<List<GroupRole>> = serializer<List<GroupRole>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: DeleteGroupRoleResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = DeleteGroupRoleResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group by ID
     * Returns a single Group by ID.
     * @param groupId Must be a valid group ID.
     * @param includeRoles Include roles for the Group object. Defaults to false. (optional)
     * @return Group
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroup(groupId: kotlin.String, includeRoles: kotlin.Boolean? = null): HttpResponse<Group> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        includeRoles?.apply { localVariableQuery["includeRoles"] = listOf("$includeRoles") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Group Announcement
     * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
     * @param groupId Must be a valid group ID.
     * @return GroupAnnouncement
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupAnnouncements(groupId: kotlin.String): HttpResponse<GroupAnnouncement> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/announcement".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Group Audit Logs
     * Returns a list of audit logs for a Group.
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param startDate The start date of the search range. (optional)
     * @param endDate The end date of the search range. (optional)
     * @param actorIds The comma-separated actor ids to search for. (optional)
     * @param eventTypes The comma-separated event types to search for. (optional)
     * @param targetIds The comma-separated target ids to search for. (optional)
     * @return PaginatedGroupAuditLogEntryList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupAuditLogs(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null, startDate: kotlin.String? = null, endDate: kotlin.String? = null, actorIds: kotlin.String? = null, eventTypes: kotlin.String? = null, targetIds: kotlin.String? = null): HttpResponse<PaginatedGroupAuditLogEntryList> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        startDate?.apply { localVariableQuery["startDate"] = listOf("$startDate") }
        endDate?.apply { localVariableQuery["endDate"] = listOf("$endDate") }
        actorIds?.apply { localVariableQuery["actorIds"] = listOf("$actorIds") }
        eventTypes?.apply { localVariableQuery["eventTypes"] = listOf("$eventTypes") }
        targetIds?.apply { localVariableQuery["targetIds"] = listOf("$targetIds") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/auditLogs".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Group Bans
     * Returns a list of banned users for a Group.
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return kotlin.collections.List<GroupMember>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupBans(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null): HttpResponse<kotlin.collections.List<GroupMember>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/bans".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupBansResponse>().map { value }
    }

    @Serializable
    private class GetGroupBansResponse(val value: List<GroupMember>) {
        @Serializer(GetGroupBansResponse::class)
        companion object : KSerializer<GetGroupBansResponse> {
            private val serializer: KSerializer<List<GroupMember>> = serializer<List<GroupMember>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupBansResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupBansResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group Gallery Images
     * Returns a list of images for a Group gallery.
     * @param groupId Must be a valid group ID.
     * @param groupGalleryId Must be a valid group gallery ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param approved If specified, only returns images that have been approved or not approved. (optional)
     * @return kotlin.collections.List<GroupGalleryImage>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupGalleryImages(groupId: kotlin.String, groupGalleryId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null, approved: kotlin.Boolean? = null): HttpResponse<kotlin.collections.List<GroupGalleryImage>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        approved?.apply { localVariableQuery["approved"] = listOf("$approved") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/galleries/{groupGalleryId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupGalleryId" + "}", "$groupGalleryId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupGalleryImagesResponse>().map { value }
    }

    @Serializable
    private class GetGroupGalleryImagesResponse(val value: List<GroupGalleryImage>) {
        @Serializer(GetGroupGalleryImagesResponse::class)
        companion object : KSerializer<GetGroupGalleryImagesResponse> {
            private val serializer: KSerializer<List<GroupGalleryImage>> = serializer<List<GroupGalleryImage>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupGalleryImagesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupGalleryImagesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group Instances
     * Returns a list of group instances
     * @param groupId Must be a valid group ID.
     * @return kotlin.collections.List<GroupInstance>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupInstances(groupId: kotlin.String): HttpResponse<kotlin.collections.List<GroupInstance>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/instances".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupInstancesResponse>().map { value }
    }

    @Serializable
    private class GetGroupInstancesResponse(val value: List<GroupInstance>) {
        @Serializer(GetGroupInstancesResponse::class)
        companion object : KSerializer<GetGroupInstancesResponse> {
            private val serializer: KSerializer<List<GroupInstance>> = serializer<List<GroupInstance>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupInstancesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupInstancesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group Invites Sent
     * Returns a list of members that have been invited to the Group.
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return kotlin.collections.List<GroupMember>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupInvites(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null): HttpResponse<kotlin.collections.List<GroupMember>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/invites".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupInvitesResponse>().map { value }
    }

    @Serializable
    private class GetGroupInvitesResponse(val value: List<GroupMember>) {
        @Serializer(GetGroupInvitesResponse::class)
        companion object : KSerializer<GetGroupInvitesResponse> {
            private val serializer: KSerializer<List<GroupMember>> = serializer<List<GroupMember>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupInvitesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupInvitesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group Member
     * Returns a LimitedGroup Member.
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @return GroupLimitedMember
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupMember(groupId: kotlin.String, userId: kotlin.String): HttpResponse<GroupLimitedMember> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/members/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List Group Members
     * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param sort The sort order of Group Member results (optional)
     * @param roleId Only returns members with a specific groupRoleId (optional)
     * @return kotlin.collections.List<GroupMember>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupMembers(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null, sort: GroupSearchSort? = null, roleId: kotlin.String? = null): HttpResponse<kotlin.collections.List<GroupMember>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        roleId?.apply { localVariableQuery["roleId"] = listOf("$roleId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/members".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupMembersResponse>().map { value }
    }

    @Serializable
    private class GetGroupMembersResponse(val value: List<GroupMember>) {
        @Serializer(GetGroupMembersResponse::class)
        companion object : KSerializer<GetGroupMembersResponse> {
            private val serializer: KSerializer<List<GroupMember>> = serializer<List<GroupMember>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupMembersResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupMembersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List Group Permissions
     * Returns a List of all possible/available permissions for a Group.
     * @param groupId Must be a valid group ID.
     * @return kotlin.collections.List<GroupPermission>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupPermissions(groupId: kotlin.String): HttpResponse<kotlin.collections.List<GroupPermission>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/permissions".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupPermissionsResponse>().map { value }
    }

    @Serializable
    private class GetGroupPermissionsResponse(val value: List<GroupPermission>) {
        @Serializer(GetGroupPermissionsResponse::class)
        companion object : KSerializer<GetGroupPermissionsResponse> {
            private val serializer: KSerializer<List<GroupPermission>> = serializer<List<GroupPermission>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupPermissionsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupPermissionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get posts from a Group
     * Get posts from a Group
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param publicOnly See public posts only. (optional)
     * @return GroupPost
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupPost(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null, publicOnly: kotlin.Boolean? = null): HttpResponse<GroupPost> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        publicOnly?.apply { localVariableQuery["publicOnly"] = listOf("$publicOnly") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/posts".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Group Join Requests
     * Returns a list of members that have requested to join the Group.
     * @param groupId Must be a valid group ID.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param blocked See blocked join requests (optional)
     * @return kotlin.collections.List<GroupMember>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupRequests(groupId: kotlin.String, n: kotlin.Int? = 60, offset: kotlin.Int? = null, blocked: kotlin.Boolean? = null): HttpResponse<kotlin.collections.List<GroupMember>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        blocked?.apply { localVariableQuery["blocked"] = listOf("$blocked") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/requests".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupRequestsResponse>().map { value }
    }

    @Serializable
    private class GetGroupRequestsResponse(val value: List<GroupMember>) {
        @Serializer(GetGroupRequestsResponse::class)
        companion object : KSerializer<GetGroupRequestsResponse> {
            private val serializer: KSerializer<List<GroupMember>> = serializer<List<GroupMember>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupRequestsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupRequestsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Group Roles
     * Returns a Group Role by ID.
     * @param groupId Must be a valid group ID.
     * @return kotlin.collections.List<GroupRole>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupRoles(groupId: kotlin.String): HttpResponse<kotlin.collections.List<GroupRole>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups/{groupId}/roles".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGroupRolesResponse>().map { value }
    }

    @Serializable
    private class GetGroupRolesResponse(val value: List<GroupRole>) {
        @Serializer(GetGroupRolesResponse::class)
        companion object : KSerializer<GetGroupRolesResponse> {
            private val serializer: KSerializer<List<GroupRole>> = serializer<List<GroupRole>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGroupRolesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGroupRolesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Join Group
     * Join a Group by ID and returns the member object.
     * @param groupId Must be a valid group ID.
     * @return GroupMember
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun joinGroup(groupId: kotlin.String): HttpResponse<GroupMember> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/join".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Kick Group Member
     * Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @return void
     */
    open suspend fun kickGroupMember(groupId: kotlin.String, userId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/members/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Leave Group
     * Leave a group by ID.
     * @param groupId Must be a valid group ID.
     * @return void
     */
    open suspend fun leaveGroup(groupId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/groups/{groupId}/leave".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Remove Role from GroupMember
     * Removes a Role from a Group Member
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @param groupRoleId Must be a valid group role ID.
     * @return kotlin.collections.List<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun removeGroupMemberRole(groupId: kotlin.String, userId: kotlin.String, groupRoleId: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/members/{userId}/roles/{groupRoleId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId").replace("{" + "groupRoleId" + "}", "$groupRoleId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<RemoveGroupMemberRoleResponse>().map { value }
    }

    @Serializable
    private class RemoveGroupMemberRoleResponse(val value: List<kotlin.String>) {
        @Serializer(RemoveGroupMemberRoleResponse::class)
        companion object : KSerializer<RemoveGroupMemberRoleResponse> {
            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: RemoveGroupMemberRoleResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = RemoveGroupMemberRoleResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Respond Group Join request
     * Responds to a Group Join Request with Accept/Deny
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @param respondGroupJoinRequest 
     * @return void
     */
    open suspend fun respondGroupJoinRequest(groupId: kotlin.String, userId: kotlin.String, respondGroupJoinRequest: RespondGroupJoinRequest): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = respondGroupJoinRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/requests/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Search Group
     * Searches Groups by name or shortCode
     * @param query Query to search for, can be either Group Name or Group shortCode (optional)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @return kotlin.collections.List<LimitedGroup>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun searchGroups(query: kotlin.String? = null, offset: kotlin.Int? = null, n: kotlin.Int? = 60): HttpResponse<kotlin.collections.List<LimitedGroup>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        query?.apply { localVariableQuery["query"] = listOf("$query") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        n?.apply { localVariableQuery["n"] = listOf("$n") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/groups",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SearchGroupsResponse>().map { value }
    }

    @Serializable
    private class SearchGroupsResponse(val value: List<LimitedGroup>) {
        @Serializer(SearchGroupsResponse::class)
        companion object : KSerializer<SearchGroupsResponse> {
            private val serializer: KSerializer<List<LimitedGroup>> = serializer<List<LimitedGroup>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SearchGroupsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SearchGroupsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Unban Group Member
     * Unbans a user from a Group.
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @return GroupMember
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun unbanGroupMember(groupId: kotlin.String, userId: kotlin.String): HttpResponse<GroupMember> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/groups/{groupId}/bans/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update Group
     * Updates a Group and returns it.
     * @param groupId Must be a valid group ID.
     * @param updateGroupRequest  (optional)
     * @return Group
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateGroup(groupId: kotlin.String, updateGroupRequest: UpdateGroupRequest? = null): HttpResponse<Group> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = updateGroupRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update Group Gallery
     * Updates a gallery for a Group.
     * @param groupId Must be a valid group ID.
     * @param groupGalleryId Must be a valid group gallery ID.
     * @param updateGroupGalleryRequest  (optional)
     * @return GroupGallery
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateGroupGallery(groupId: kotlin.String, groupGalleryId: kotlin.String, updateGroupGalleryRequest: UpdateGroupGalleryRequest? = null): HttpResponse<GroupGallery> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = updateGroupGalleryRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/galleries/{groupGalleryId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupGalleryId" + "}", "$groupGalleryId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update Group Member
     * Updates a Group Member
     * @param groupId Must be a valid group ID.
     * @param userId Must be a valid user ID.
     * @param updateGroupMemberRequest  (optional)
     * @return GroupLimitedMember
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateGroupMember(groupId: kotlin.String, userId: kotlin.String, updateGroupMemberRequest: UpdateGroupMemberRequest? = null): HttpResponse<GroupLimitedMember> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = updateGroupMemberRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/members/{userId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Edits a Group post
     * Edits a Group post
     * @param groupId Must be a valid group ID.
     * @param notificationId Must be a valid notification ID.
     * @param createGroupPostRequest 
     * @return GroupPost
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateGroupPost(groupId: kotlin.String, notificationId: kotlin.String, createGroupPostRequest: CreateGroupPostRequest): HttpResponse<GroupPost> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createGroupPostRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/posts/{notificationId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "notificationId" + "}", "$notificationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update Group Role
     * Updates a group role by ID.
     * @param groupId Must be a valid group ID.
     * @param groupRoleId Must be a valid group role ID.
     * @param updateGroupRoleRequest  (optional)
     * @return kotlin.collections.List<GroupRole>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateGroupRole(groupId: kotlin.String, groupRoleId: kotlin.String, updateGroupRoleRequest: UpdateGroupRoleRequest? = null): HttpResponse<kotlin.collections.List<GroupRole>> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = updateGroupRoleRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/groups/{groupId}/roles/{groupRoleId}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "groupRoleId" + "}", "$groupRoleId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UpdateGroupRoleResponse>().map { value }
    }


    @Serializable
    private class UpdateGroupRoleResponse(val value: List<GroupRole>) {
        @Serializer(UpdateGroupRoleResponse::class)
        companion object : KSerializer<UpdateGroupRoleResponse> {
            private val serializer: KSerializer<List<GroupRole>> = serializer<List<GroupRole>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UpdateGroupRoleResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UpdateGroupRoleResponse(serializer.deserialize(decoder))
        }
    }

}
