/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.apis

import io.github.kamo030.vrchatapi.models.CreateInstanceRequest
import io.github.kamo030.vrchatapi.models.Error
import io.github.kamo030.vrchatapi.models.Instance
import io.github.kamo030.vrchatapi.models.InstanceShortNameResponse

import io.github.kamo030.vrchatapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class InstancesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Close Instance
     * Close an instance or update the closedAt time when it will be closed.  You can only close an instance if the ownerId is yourself or if the instance owner is a group and you have the &#x60;group-instance-moderate&#x60; permission.
     * @param worldId Must be a valid world ID.
     * @param instanceId Must be a valid instance ID.
     * @param hardClose Whether to hard close the instance. Defaults to false. (optional)
     * @param closedAt The time after which users won&#39;t be allowed to join the instances. If omitted, the instance will be closed immediately. (optional)
     * @return Instance
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun closeInstance(worldId: kotlin.String, instanceId: kotlin.String, hardClose: kotlin.Boolean? = null, closedAt: kotlin.String? = null): HttpResponse<Instance> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        hardClose?.apply { localVariableQuery["hardClose"] = listOf("$hardClose") }
        closedAt?.apply { localVariableQuery["closedAt"] = listOf("$closedAt") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/instances/{worldId}:{instanceId}".replace("{" + "worldId" + "}", "$worldId").replace("{" + "instanceId" + "}", "$instanceId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create Instance
     * Create an instance
     * @param createInstanceRequest 
     * @return Instance
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createInstance(createInstanceRequest: CreateInstanceRequest): HttpResponse<Instance> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = createInstanceRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/instances",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Get Instance
     * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
     * @param worldId Must be a valid world ID.
     * @param instanceId Must be a valid instance ID.
     * @return Instance
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getInstance(worldId: kotlin.String, instanceId: kotlin.String): HttpResponse<Instance> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/instances/{worldId}:{instanceId}".replace("{" + "worldId" + "}", "$worldId").replace("{" + "instanceId" + "}", "$instanceId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Instance By Short Name
     * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.
     * @param shortName Must be a valid instance short name.
     * @return Instance
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getInstanceByShortName(shortName: kotlin.String): HttpResponse<Instance> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/instances/s/{shortName}".replace("{" + "shortName" + "}", "$shortName"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Instance Short Name
     * Returns an instance short name.
     * @param worldId Must be a valid world ID.
     * @param instanceId Must be a valid instance ID.
     * @return InstanceShortNameResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getShortName(worldId: kotlin.String, instanceId: kotlin.String): HttpResponse<InstanceShortNameResponse> {

        val localVariableAuthNames = listOf<String>("authCookie")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/instances/{worldId}:{instanceId}/shortName".replace("{" + "worldId" + "}", "$worldId").replace("{" + "instanceId" + "}", "$instanceId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
