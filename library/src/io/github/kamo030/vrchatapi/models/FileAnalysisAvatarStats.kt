/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.kamo030.vrchatapi.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param animatorCount 
 * @param audioSourceCount 
 * @param blendShapeCount 
 * @param boneCount 
 * @param bounds 
 * @param clothCount 
 * @param constraintCount 
 * @param contactCount 
 * @param customExpressions 
 * @param customizeAnimationLayers 
 * @param enableEyeLook 
 * @param lightCount 
 * @param lineRendererCount 
 * @param lipSync 
 * @param materialCount 
 * @param materialSlotsUsed 
 * @param meshCount 
 * @param meshIndices 
 * @param meshParticleMaxPolygons 
 * @param meshPolygons 
 * @param meshVertices 
 * @param particleCollisionEnabled 
 * @param particleSystemCount 
 * @param particleTrailsEnabled 
 * @param physBoneColliderCount 
 * @param physBoneCollisionCheckCount 
 * @param physBoneComponentCount 
 * @param physBoneTransformCount 
 * @param physicsColliders 
 * @param physicsRigidbodies 
 * @param skinnedMeshCount 
 * @param skinnedMeshIndices 
 * @param skinnedMeshPolygons 
 * @param skinnedMeshVertices 
 * @param totalClothVertices 
 * @param totalIndices 
 * @param totalMaxParticles 
 * @param totalPolygons 
 * @param totalTextureUsage 
 * @param totalVertices 
 * @param trailRendererCount 
 * @param writeDefaultsUsed 
 * @param cameraCount 
 */
@Serializable

data class FileAnalysisAvatarStats (

    @SerialName(value = "animatorCount") @Required val animatorCount: kotlin.Int,

    @SerialName(value = "audioSourceCount") @Required val audioSourceCount: kotlin.Int,

    @SerialName(value = "blendShapeCount") @Required val blendShapeCount: kotlin.Int,

    @SerialName(value = "boneCount") @Required val boneCount: kotlin.Int,

    @SerialName(value = "bounds") @Required val bounds: kotlin.collections.List<kotlin.Double>,

    @SerialName(value = "clothCount") @Required val clothCount: kotlin.Int,

    @SerialName(value = "constraintCount") @Required val constraintCount: kotlin.Int,

    @SerialName(value = "contactCount") @Required val contactCount: kotlin.Int,

    @SerialName(value = "customExpressions") @Required val customExpressions: kotlin.Boolean,

    @SerialName(value = "customizeAnimationLayers") @Required val customizeAnimationLayers: kotlin.Boolean,

    @SerialName(value = "enableEyeLook") @Required val enableEyeLook: kotlin.Boolean,

    @SerialName(value = "lightCount") @Required val lightCount: kotlin.Int,

    @SerialName(value = "lineRendererCount") @Required val lineRendererCount: kotlin.Int,

    @SerialName(value = "lipSync") @Required val lipSync: kotlin.Int,

    @SerialName(value = "materialCount") @Required val materialCount: kotlin.Int,

    @SerialName(value = "materialSlotsUsed") @Required val materialSlotsUsed: kotlin.Int,

    @SerialName(value = "meshCount") @Required val meshCount: kotlin.Int,

    @SerialName(value = "meshIndices") @Required val meshIndices: kotlin.Int,

    @SerialName(value = "meshParticleMaxPolygons") @Required val meshParticleMaxPolygons: kotlin.Int,

    @SerialName(value = "meshPolygons") @Required val meshPolygons: kotlin.Int,

    @SerialName(value = "meshVertices") @Required val meshVertices: kotlin.Int,

    @SerialName(value = "particleCollisionEnabled") @Required val particleCollisionEnabled: kotlin.Boolean,

    @SerialName(value = "particleSystemCount") @Required val particleSystemCount: kotlin.Int,

    @SerialName(value = "particleTrailsEnabled") @Required val particleTrailsEnabled: kotlin.Boolean,

    @SerialName(value = "physBoneColliderCount") @Required val physBoneColliderCount: kotlin.Int,

    @SerialName(value = "physBoneCollisionCheckCount") @Required val physBoneCollisionCheckCount: kotlin.Int,

    @SerialName(value = "physBoneComponentCount") @Required val physBoneComponentCount: kotlin.Int,

    @SerialName(value = "physBoneTransformCount") @Required val physBoneTransformCount: kotlin.Int,

    @SerialName(value = "physicsColliders") @Required val physicsColliders: kotlin.Int,

    @SerialName(value = "physicsRigidbodies") @Required val physicsRigidbodies: kotlin.Int,

    @SerialName(value = "skinnedMeshCount") @Required val skinnedMeshCount: kotlin.Int,

    @SerialName(value = "skinnedMeshIndices") @Required val skinnedMeshIndices: kotlin.Int,

    @SerialName(value = "skinnedMeshPolygons") @Required val skinnedMeshPolygons: kotlin.Int,

    @SerialName(value = "skinnedMeshVertices") @Required val skinnedMeshVertices: kotlin.Int,

    @SerialName(value = "totalClothVertices") @Required val totalClothVertices: kotlin.Int,

    @SerialName(value = "totalIndices") @Required val totalIndices: kotlin.Int,

    @SerialName(value = "totalMaxParticles") @Required val totalMaxParticles: kotlin.Int,

    @SerialName(value = "totalPolygons") @Required val totalPolygons: kotlin.Int,

    @SerialName(value = "totalTextureUsage") @Required val totalTextureUsage: kotlin.Int,

    @SerialName(value = "totalVertices") @Required val totalVertices: kotlin.Int,

    @SerialName(value = "trailRendererCount") @Required val trailRendererCount: kotlin.Int,

    @SerialName(value = "writeDefaultsUsed") @Required val writeDefaultsUsed: kotlin.Boolean,

    @SerialName(value = "cameraCount") val cameraCount: kotlin.Int? = null

)

